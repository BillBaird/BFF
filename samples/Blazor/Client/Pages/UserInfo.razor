@page "/userInfo"
@using System.Text.Json
@inject HttpClient Http

<h3>UserInfo</h3>

<AuthorizeView>
    <Authorized>
        <p>User is currently authenticated, so this should work. Note that both cross-site and auth show up since the user is Authorized. See NavMenu.razor</p>
    </Authorized>
    <NotAuthorized>
        <p>User is currently not authenticated, so this should return a "Forbidden" error. Note that only the cross-site UserInfo menu item shows up as controlled by NavMenu.razor</p>
    </NotAuthorized>
</AuthorizeView>

@if (data == null)
{
    <p><em>Loading...</em></p>
    <p>@error</p>
}
else
{
    <style>
         pre {
            overflow-x: auto;
            white-space: pre-wrap;
            white-space: -moz-pre-wrap;
            white-space: -o-pre-wrap;
            word-wrap: anywhere;
         }
    </style>
    <pre>
        @data
    </pre>
}

@code {
    private string data;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/foo/userinfo");
        if (response.IsSuccessStatusCode)
        {
            var foo = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(await response.Content.ReadAsStringAsync());
            data = JsonSerializer.Serialize(foo, new JsonSerializerOptions { WriteIndented = true });
        }
        else
        {
            error = "Error contacting API: " + response.StatusCode.ToString();
        }
    }
}